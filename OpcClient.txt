using System;
using System.Collections.Generic;
using OPCAutomation;

public class OpcClient : IDisposable
{
    private OPCServer _opcServer;
    private readonly Dictionary<string, OPCGroup> _groups = new Dictionary<string, OPCGroup>();

    public OpcClient(string serverProgId)
    {
        _opcServer = new OPCServer();
        ServerProgId = serverProgId;
    }

    public string ServerProgId { get; }

    public bool Connect()
    {
        try
        {
            _opcServer.Connect(ServerProgId, "");
            if (_opcServer.ServerState == (int)OPCServerState.OPCRunning)
            {
                Console.WriteLine("Connected to OPC server.");
                return true;
            }
            else
            {
                Console.WriteLine("Failed to connect to OPC server.");
                return false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error connecting to OPC server: {ex.Message}");
            return false;
        }
    }

    public void Disconnect()
    {
        if (_opcServer != null && _opcServer.ServerState == (int)OPCServerState.OPCRunning)
        {
            _opcServer.Disconnect();
            Console.WriteLine("Disconnected from OPC server.");
        }
    }

    public bool AddGroup(string groupName)
    {
        try
        {
            OPCGroups opcGroups = _opcServer.OPCGroups;
            OPCGroup opcGroup = opcGroups.Add(groupName);
            opcGroup.IsActive = true;
            opcGroup.UpdateRate = 1000;
            _groups.Add(groupName, opcGroup);
            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding group to OPC server: {ex.Message}");
            return false;
        }
    }

    public bool AddItem(string groupName, string itemName)
    {
        try
        {
            if (_groups.TryGetValue(groupName, out OPCGroup opcGroup))
            {
                OPCItems opcItems = opcGroup.OPCItems;
                opcItems.AddItem(itemName, 1);
                return true;
            }
            else
            {
                Console.WriteLine($"Group '{groupName}' not found.");
                return false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding item to OPC group: {ex.Message}");
            return false;
        }
    }

    public object ReadItemValue(string groupName, string itemName)
    {
        try
        {
            if (_groups.TryGetValue(groupName, out OPCGroup opcGroup))
            {
                OPCItems opcItems = opcGroup.OPCItems;
                opcItems.Item(itemName, 1).Read(1, out object value, out _, out _, out _);
                return value;
            }
            else
            {
                Console.WriteLine($"Group '{groupName}' not found.");
                return null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error reading item value: {ex.Message}");
            return null;
        }
    }

    public void SubscribeItemValueChange(string groupName, string itemName, Action<object> callback)
    {
        try
        {
            if (_groups.TryGetValue(groupName, out OPCGroup opcGroup))
            {
                OPCItems opcItems = opcGroup.OPCItems;
                OPCItem opcItem = opcItems.Item(itemName, 1);
                opcItem.DataChange += (transactionID, numItems, clientHandles, itemValues, qualities, timeStamps) =>
                {
                    callback?.Invoke(itemValues.GetValue(1));
                };
            }
            else
            {
                Console.WriteLine($"Group '{groupName}' not found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error subscribing to item value change: {ex.Message}");
        }
    }

    public void Dispose()
    {
        Disconnect();
        _opcServer = null;
        _groups.Clear();
    }
}




using (var opcClient = new OpcClient("Matrikon.OPC.Simulation"))
        {
            if (opcClient.Connect())
            {
                if (opcClient.AddGroup("Group1"))
                {
                    if (opcClient.AddItem("Group1", "Random.Int1"))
                    {
                        Console.WriteLine("Item added successfully. Reading data...");
                        object value = opcClient.ReadItemValue("Group1", "Random.Int1");
                        if (value != null)
                        {
                            Console.WriteLine($"Value of Item 'Random.Int1': {value}");
                        }
                        else
                        {
                            Console.WriteLine("Failed to read item value.");
                        }
                        Console.WriteLine("Subscribing to value change...");
                        opcClient.SubscribeItemValueChange("Group1", "Random.Int1", newValue =>
                        {
                            Console.WriteLine($"Value changed: {newValue}");
                        });
                        Console.WriteLine("Press any key to stop monitoring.");
                        Console.ReadKey();
                    }
                    else
                    {
                        Console.WriteLine("Failed to add item.");
                    }
                }
                else
                {
                    Console.WriteLine("Failed to add group.");
                }
            }
            else
            {
                Console.WriteLine("Failed to connect to OPC server.");
            }
        }